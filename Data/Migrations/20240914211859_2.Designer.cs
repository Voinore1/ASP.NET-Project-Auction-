// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AuctionDBContext))]
    [Migration("20240914211859_2")]
    partial class _2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuctionUser", b =>
                {
                    b.Property<int>("ViewersId")
                        .HasColumnType("int");

                    b.Property<int>("WatchListId")
                        .HasColumnType("int");

                    b.HasKey("ViewersId", "WatchListId");

                    b.HasIndex("WatchListId");

                    b.ToTable("AuctionUser");
                });

            modelBuilder.Entity("Data.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityNow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("StartPrice")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("VenichleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("VenichleId")
                        .IsUnique();

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Data.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bid");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeller")
                        .HasColumnType("bit");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000000,
                            Email = "admin@gmail.com",
                            Password = "1",
                            PhoneNumber = 1954161,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.BodyStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyStyles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Style = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Style = "Coupe"
                        },
                        new
                        {
                            Id = 3,
                            Style = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Style = "SUV"
                        },
                        new
                        {
                            Id = 5,
                            Style = "Crossover"
                        },
                        new
                        {
                            Id = 6,
                            Style = "Convertible"
                        },
                        new
                        {
                            Id = 7,
                            Style = "Wagon"
                        },
                        new
                        {
                            Id = 8,
                            Style = "Van"
                        },
                        new
                        {
                            Id = 9,
                            Style = "Truck"
                        },
                        new
                        {
                            Id = 10,
                            Style = "Minivan"
                        },
                        new
                        {
                            Id = 11,
                            Style = "Pickup"
                        },
                        new
                        {
                            Id = 12,
                            Style = "Bus"
                        },
                        new
                        {
                            Id = 13,
                            Style = "Limousine"
                        },
                        new
                        {
                            Id = 14,
                            Style = "Cabriolet"
                        },
                        new
                        {
                            Id = 15,
                            Style = "Roadster"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Volkswagen"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LPG"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CNG"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "A3"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Name = "A4"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Name = "A5"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Name = "A6"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            Name = "A7"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 1,
                            Name = "A8"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            Name = "Q3"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            Name = "Q5"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            Name = "Q7"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            Name = "Q8"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 2,
                            Name = "X1"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            Name = "X2"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 2,
                            Name = "X3"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 2,
                            Name = "X4"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            Name = "X5"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 2,
                            Name = "X6"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 2,
                            Name = "X7"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 3,
                            Name = "Corvette"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 3,
                            Name = "Camaro"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 3,
                            Name = "Malibu"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 3,
                            Name = "Impala"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 4,
                            Name = "Mustang"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 4,
                            Name = "Fiesta"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 4,
                            Name = "Focus"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CVT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DCT"
                        });
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Venichle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("BodyStyleId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExteriorColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExteriorPhotosURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HaveProblems")
                        .HasColumnType("bit");

                    b.Property<string>("InteriorPhotosURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("MainPhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufactureDate")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("Odometr")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Problems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyStyleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Venichles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyStyleId = 2,
                            BrandId = 3,
                            Description = "Good car",
                            ExteriorColor = "Black",
                            FuelTypeId = 1,
                            HaveProblems = false,
                            IsModified = true,
                            MainPhotoURL = "https://images.unsplash.com/photo-1672151574300-b32db79a42db?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            ManufactureDate = 2007,
                            ModelId = 18,
                            Odometr = 100000,
                            OwnerId = 1,
                            Seats = 2,
                            TransmissionId = 2,
                            VIN = "1G1YY26U575100001"
                        },
                        new
                        {
                            Id = 2,
                            BodyStyleId = 1,
                            BrandId = 1,
                            Description = "Audi A3 in excellent condition",
                            ExteriorColor = "White",
                            FuelTypeId = 1,
                            HaveProblems = false,
                            IsModified = false,
                            MainPhotoURL = "https://images.unsplash.com/photo-1717711081688-985a7a3e6a9f?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            ManufactureDate = 2019,
                            ModelId = 1,
                            Odometr = 20000,
                            OwnerId = 1,
                            Seats = 5,
                            TransmissionId = 2,
                            VIN = "WAUZZZ8V7KA123456"
                        },
                        new
                        {
                            Id = 3,
                            BodyStyleId = 1,
                            BrandId = 2,
                            Description = "BMW 3 Series, well maintained",
                            ExteriorColor = "Blue",
                            FuelTypeId = 1,
                            HaveProblems = false,
                            IsModified = false,
                            MainPhotoURL = "https://www.topgear.com/sites/default/files/2022/11/P90485000_highRes_bmw-330e-xdrive-tour.jpg",
                            ManufactureDate = 2013,
                            ModelId = 11,
                            Odometr = 60000,
                            OwnerId = 1,
                            Seats = 5,
                            TransmissionId = 2,
                            VIN = "WBA3A5C50DF123456"
                        },
                        new
                        {
                            Id = 4,
                            BodyStyleId = 11,
                            BrandId = 4,
                            Description = "Ford F-150, great for off-road",
                            ExteriorColor = "Silver",
                            FuelTypeId = 2,
                            HaveProblems = false,
                            IsModified = true,
                            MainPhotoURL = "https://i.infocar.ua/i/12/6467/1400x936.jpg",
                            ManufactureDate = 2014,
                            ModelId = 22,
                            Odometr = 70000,
                            OwnerId = 1,
                            Seats = 5,
                            TransmissionId = 2,
                            VIN = "1FTFW1EF1EK123456"
                        },
                        new
                        {
                            Id = 5,
                            BodyStyleId = 1,
                            BrandId = 10,
                            Description = "Tesla Model 3, electric car",
                            ExteriorColor = "Black",
                            FuelTypeId = 3,
                            HaveProblems = false,
                            IsModified = false,
                            MainPhotoURL = "https://tsk.ua/datacache/f/8/f/9/4/f8f948db809a2713f2790bb16426a365a26df356.jpeg",
                            ManufactureDate = 2019,
                            ModelId = 24,
                            Odometr = 20000,
                            OwnerId = 1,
                            Seats = 5,
                            TransmissionId = 2,
                            VIN = "5YJ3E1EA7KF123456"
                        });
                });

            modelBuilder.Entity("AuctionUser", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ViewersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Auction", null)
                        .WithMany()
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Auction", b =>
                {
                    b.HasOne("Data.Entities.User", "Seller")
                        .WithMany("Auctions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.VenichleInfo.Venichle", "Venichle")
                        .WithOne("Auction")
                        .HasForeignKey("Data.Entities.Auction", "VenichleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("Venichle");
                });

            modelBuilder.Entity("Data.Entities.Bid", b =>
                {
                    b.HasOne("Data.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.HasOne("Data.Entities.Auction", "Auction")
                        .WithMany("Comments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Model", b =>
                {
                    b.HasOne("Data.Entities.VenichleInfo.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Venichle", b =>
                {
                    b.HasOne("Data.Entities.VenichleInfo.BodyStyle", "BodyStyle")
                        .WithMany("Venichles")
                        .HasForeignKey("BodyStyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.VenichleInfo.Brand", "Brand")
                        .WithMany("Venichles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.VenichleInfo.FuelType", "FuelType")
                        .WithMany("Venichles")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.VenichleInfo.Model", "Model")
                        .WithMany("Venichles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "Owner")
                        .WithMany("Venichles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.VenichleInfo.Transmission", "Transmission")
                        .WithMany("Venichles")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BodyStyle");

                    b.Navigation("Brand");

                    b.Navigation("FuelType");

                    b.Navigation("Model");

                    b.Navigation("Owner");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Data.Entities.Auction", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.BodyStyle", b =>
                {
                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.FuelType", b =>
                {
                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Model", b =>
                {
                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Transmission", b =>
                {
                    b.Navigation("Venichles");
                });

            modelBuilder.Entity("Data.Entities.VenichleInfo.Venichle", b =>
                {
                    b.Navigation("Auction");
                });
#pragma warning restore 612, 618
        }
    }
}
